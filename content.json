{"meta":{"title":"/home/mattshen","subtitle":"Self-entertaining Place","description":"Writings about my software engineering philosophy","author":"Matt Shen <lovelywib@gmail.com>","url":"https://mattshen.mazeforce.com"},"pages":[{"title":"About Me","date":"2017-03-19T10:29:37.000Z","updated":"2017-03-19T10:29:37.000Z","comments":true,"path":"about/index.html","permalink":"https://mattshen.mazeforce.com/about/index.html","excerpt":"","text":"Grown up in Jiangnan Area of China Grown in the countryside in Huzhou, Zhejiang, I had quite a deep play on everyday life elements – water, mud, fire, electicity etc, and had quite a lot fun with the animals - fishes, birds, fresh water lobster, cats, dogs etc. Then I went to Hangzhou - the city with the very beautiful West Lake - where I finished my study of Software Engineering in University, worked for three companies and started a family. Intrigued by the world outside of ChinaDenver, Colorado, United StatesOn Dec 27, 2007, the first time I landed in Denver, US – the amazing Mile-High city, sunny, snowy. I spent over a year during the three years with my second employer, when I had better chances to experience the American life and working style as well as opportunities to work some nice people. Sydney, New South Wales, AustraliaThe experience of living in US eventually made me seek opportunities to live overseas. After some research and a proper amount of efforts, I came to Sydney – the sunny city with fantastic beaches."},{"title":"Categories","date":"2017-03-18T08:09:30.000Z","updated":"2017-03-18T08:09:30.000Z","comments":true,"path":"categories/index.html","permalink":"https://mattshen.mazeforce.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-03-18T08:09:39.000Z","updated":"2017-03-18T08:09:39.000Z","comments":true,"path":"tags/index.html","permalink":"https://mattshen.mazeforce.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java 8 Lambda Expression in Short","slug":"Java-8-Lambda-Expression-in-Short","date":"2016-05-07T14:00:00.000Z","updated":"2017-04-01T11:15:06.000Z","comments":true,"path":"2016/05/08/Java-8-Lambda-Expression-in-Short/","link":"","permalink":"https://mattshen.mazeforce.com/2016/05/08/Java-8-Lambda-Expression-in-Short/","excerpt":"","text":"Anonymous class in a new formSimply speaking, Java 8 Lambda expressions are just anonymous classes which have occasionally made their appearances in the previous Java versions. But now they appears in much more concise forms with the new syntactic level support. Here are a couple of examples how concise we can archive in Java coding with the help of lambda expression. 1234567891011121314151617181920212223//Anonymous classCollections.sort(names, new Comparator&lt;String&gt;() &#123; @Override public int compare(String o1, String o2) &#123; return o1.compareTo(o2); &#125;&#125;);//Java 8 Lambda expression in complete Collections.sort(names, (String o1, String o2) -&gt; &#123; return o1.compareTo(o2);&#125;);//Parameter type can be omitted, because the types can be inferredCollections.sort(names, (o1, o2) -&gt; &#123; return o1.compareTo(o2);&#125;);//return can be omitted for one line lambdaCollections.sort(names, (o1, o2) -&gt; o1.compareTo(o2));//method reference can make it even shorterCollections.sort(names, String::compareTo); Default method is necessary for lambdasWith anonymous classes, it is possible to define a new utility method, e.g. 12345678910//Anonymous classCollections.sort(names, new Comparator&lt;String&gt;() &#123; @Override public int compare(String o1, String o2) &#123; return o1.compareTo(o2); &#125; public Comparator&lt;String&gt; reversed() &#123; return Collections.reverseOrder(this); &#125;&#125;); But the utility method cannot fit into a concise lambda. This is why Java 8 has made default methods possible in interfaces. The example above can now be re-written in Java 8 as follow:1Collections.sort(names, ((Comparator&lt;String&gt;)String::compareTo).reversed()); Note: the type casting is necessary, because type inference is not that smart in that context. Using functional features rather than being functionalThe introduction of lambda and the re-written interfaces/classes makes Java 8 look like functional programming language. But as a matter of fact, it is not. Type is still the the first-class citizen, not functions. Everything in Java is still type of either predefined types or primitives. Passing lambdas around is actually just passing usual objects around. However, this is what is needed for most of the Java developers – writing concise code as well as thinking in a functional programming way. References https://github.com/winterbe/java8-tutorial http://www.infoq.com/articles/How-Functional-is-Java-8","categories":[{"name":"Programming Languages","slug":"Programming-Languages","permalink":"https://mattshen.mazeforce.com/categories/Programming-Languages/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://mattshen.mazeforce.com/tags/Java/"},{"name":"Lambda","slug":"Lambda","permalink":"https://mattshen.mazeforce.com/tags/Lambda/"},{"name":"Functional","slug":"Functional","permalink":"https://mattshen.mazeforce.com/tags/Functional/"}]}]}