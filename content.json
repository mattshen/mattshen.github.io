{"meta":{"title":"/home/mattshen","subtitle":"Self-entertaining Place","description":"Writings about my software engineering philosophy","author":"Matt Shen <lovelywib@gmail.com>","url":"https://www.mattshen.com"},"pages":[{"title":"About Me","date":"2017-06-09T00:18:49.000Z","updated":"2017-06-09T00:18:49.000Z","comments":true,"path":"about/index.html","permalink":"https://www.mattshen.com/about/index.html","excerpt":"","text":"Grown up in Jiangnan Area of China Grown in the countryside in Huzhou, Zhejiang, I had quite a deep play on everyday life elements – water, mud, fire, electicity etc, and had quite a lot fun with the animals - fishes, birds, fresh water lobster, cats, dogs etc. Then I went to Hangzhou - the city with the very beautiful West Lake - where I finished my study of Software Engineering in University, worked for three companies and started a family. Intrigued by the world outside of China– Denver, Colorado, United StatesOn Dec 27, 2007, the first time I landed in Denver, US – the amazing Mile-High city, sunny, snowy. I spent over a year during the three years with my second employer, when I had better chances to experience the American life and working style as well as opportunities to work some nice people. Sydney, New South Wales, AustraliaThe experience of living in US eventually made me seek opportunities to live overseas. After some research and a proper amount of efforts, I came to Sydney – the sunny city with fantastic beaches."},{"title":"Topics","date":"2017-06-12T23:54:05.000Z","updated":"2017-06-12T23:54:05.000Z","comments":true,"path":"topics/index.html","permalink":"https://www.mattshen.com/topics/index.html","excerpt":"","text":"Linux Server Provisioning Disable SSH Login for a root userAdd following line to file: /etc/ssh/sshd_config, then sudo service ssh restart 1PermitRootLogin no How To Create a Sudo User on Ubuntu How To Setup a Firewall with UFW on an Ubuntu and Debian Cloud Server How To Install Nginx on Ubuntu 16.04 How To Secure Nginx with Let’s Encrypt on Ubuntu 16.04 Install MongoDB Community Edition on Ubuntu Network Administration– UNIX / Linux: 10 Netstat Command Examples Programming Awesome Nodejs"},{"title":"Categories","date":"2017-03-18T08:09:30.000Z","updated":"2017-03-18T08:09:30.000Z","comments":true,"path":"categories/index.html","permalink":"https://www.mattshen.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-06-09T00:14:43.000Z","updated":"2017-06-09T00:14:43.000Z","comments":true,"path":"tags/index.html","permalink":"https://www.mattshen.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"React Native Push Notifications","slug":"React-Native-Push-Notifications","date":"2017-04-05T10:00:00.000Z","updated":"2017-04-06T05:41:23.000Z","comments":true,"path":"2017/04/05/React-Native-Push-Notifications/","link":"","permalink":"https://www.mattshen.com/2017/04/05/React-Native-Push-Notifications/","excerpt":"","text":"WhatIt’s an article about my own experience implementing Push Notification in react-native for both platforms. It contains the tools and libraries I picked and pitfalls I encountered. WhyPush Notification looks simple, but actually it carries some complexities when putting it in use. There is quite a list of pitfalls for both platforms as well. Understand the ConceptsIf you are not new to software engineering, it shouldn’t be a major hurdle to understand the design of push notification service. However, here are two articles I found from online that should be helpful to familiarize yourself with it. How do iOS Push Notifications work? How Does Google Cloud Messaging Work? The fundamental concepts and system architecture are almost the same. So once you know one of them, you can easily understand the other one (融会贯通). To ImplementServer SideThe easiest to find out how server side works is to setup amazon SNS. It can be used to test both GCM/FCM and APN. For GCM/FCM, you can also test via postman, or even curl. I didn’t find an easy way to test APN with some simple tool so far. If you prefer DIY, and eventually to write your provider code to communicate with Google and Apple server directly. Here are two options written in NodeJS. https://github.com/node-apn/node-apn https://github.com/ToothlessGear/node-gcm App SideFirst, we need pick some mature and stable libraries. Unfortunately, there isn’t one. Here are the only two that has got some attention in the community. https://github.com/zo0r/react-native-push-notification https://github.com/wix/react-native-notifications I prefer the 2nd one, which is more active and has better completeness in features. If you have prior experience on implementing Push Notification for one of the platforms, you can also write your own react-native modules which give you more control. Pitfalls1. FCM vs GCMFCM is the evolved version of GCM. Google has also move API key setup from API Console and put it in Firebase Console. So, if you are reading some old articles about how to setup GCM with Google, they are most likely out-of- date. However, once you get the API key from Firebase Console, the rest is pretty easy. 2. APN setupThis is the help page to Apple - configure your notifications with Apple. In case you work for a company and you don’t have the permission creating Apple Push Notification service SSL, you need to ask someone who has the permission, and send the certificate (in correct format, .p12) to you so you can test how server side works. 3. Launching App from cold state and get the initial notificationiOS. Natively supported even in react-native PushNotificationIOS. Only problem is you cannot get the initial notification if App is launched from the icon. Android. react-native-notifications provides a similar implementation just like the iOS one. So far I haven’t found any problem with it. Also, you cannot get the initial notification if launching App from the icon. 4. Background vs Foreground NotificationiOS. Server side has to include &quot;content-available&quot;: 1 in the JSON message, otherwise your post-notification processing code won’t be called in background e.g.1&#123;\"aps\":&#123;\"content-available\":1&#125;&#125; See more details here Android. Notification are even fired when app is in foreground by default. You probably want to write your own logic to block foreground firing. Here is what I did (with react-native-notifications):1234567@Overrideprotected void postNotification(int id, Notification notification) &#123; if (!mAppLifecycleFacade.isAppVisible()) &#123; final NotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE); notificationManager.notify(id, notification); &#125;&#125; 5. Badge ChallengeAndroid. Badging is not a standard Android feature, but the major phone maker all did their own implementations, Samsung, HTC, Huawei, etc. There is a very good library in github – ShortcutBadger. You need write a react-native module to call some APIs. iOS. It’s quite a pain till the time I write this article. The badge is controlled by &quot;content-available&quot;: 1 when the App is cold (aka killed or not launched). If you write your own provider, you have the control. But if notification is from some SaaS service, you have to rely on whether they send it to you or not. 6. What number to badge?At the time of this writing. We’ve decided to badge 1 to just attract user’s attention that there is something new in the app. If you want some complex scenarios to work. You probably need to maintain the number at your server side, which is quite a challenge. EndingHope this article help answer some of your questions or confusions.","categories":[{"name":"App","slug":"App","permalink":"https://www.mattshen.com/categories/App/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://www.mattshen.com/tags/Android/"},{"name":"iOS","slug":"iOS","permalink":"https://www.mattshen.com/tags/iOS/"},{"name":"react-native","slug":"react-native","permalink":"https://www.mattshen.com/tags/react-native/"}]},{"title":"Javascript the types (Nouns and Verbs)","slug":"Javascript-Re-learn-the-types","date":"2017-03-19T23:02:00.000Z","updated":"2017-04-01T11:30:03.000Z","comments":true,"path":"2017/03/20/Javascript-Re-learn-the-types/","link":"","permalink":"https://www.mattshen.com/2017/03/20/Javascript-Re-learn-the-types/","excerpt":"","text":"The reasonThis is the first post of a series of Javascript re-learn posts. Why am I writing it when there are some many similar stuff out on Internet? If there has to be a reason, the first one would be to review my knowledge on Javascript and hopefully I can get some level of “学而时习之,可以为师矣”. TypesOne of the best ways to learn a programming language is to think like I’m going to design it. Just like the natural languages, first we need to properly express the things in nouns, like apple, orange, etc. As an advanced programming language, Javascript’s types are properly designed, not too simple not too complex. It starts with Number, then String and Boolean. Then a little more complex, Object and Function. And that’s all, not too overwhelming for beginners to start with. NumberRather that some other languages, e.g. Java, with which the programmer has to remember Integer, Long, Float, Double, BigDecimal and BigInteger, etc, Javascript relieves the beginners from this burden. All numbers start with Type Number. StringAfter much pain with C, most programming language designers have added String as a primitive type ever since, which is proved to be the very right thing to do. BooleanBoolean is not necessary to be a primitive, e.g. C. But defining a Boolean type has been well accepted. It makes the readability of the program better. see following negative example: 1234567int a = 0; //Then change a to some other valueif (a) &#123; // do something if expression \"a\" is true //do something&#125; To be honest, after so many years, I still have to google to find out whether 0 is true or non-0 is true. ObjectWhen Javascript is designed, OOP is already well accepted. So the author adopted some OOP into the language. But probably he doesn’t like the complexities of OOP – classes, interfaces, abstract classes, inheritance, etc. So he just pick one very simple concept, the Object, to express all the different real life things, just like he picked only Number to express all the numbers. FunctionImagine (脑洞大开) the first human beings who invented the word “apple”, then they can use it communicate with their peers. But soon after that, they would have the need to express “pick” and “eat”. In the programming languages, “pick” and “eat” are functions. Once programmers have objects, they would need functions to operate on the objects. Unlike some languages like Java (sorry), Javascript’s functions can work independently. They are first-class citizens just like objects. This little difference opens the door for Javascript to become a proper player in the functional programming area.","categories":[{"name":"Programming Languages","slug":"Programming-Languages","permalink":"https://www.mattshen.com/categories/Programming-Languages/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://www.mattshen.com/tags/Javascript/"},{"name":"Type","slug":"Type","permalink":"https://www.mattshen.com/tags/Type/"}]},{"title":"Java 8 Lambda Expression in Short","slug":"Java-8-Lambda-Expression-in-Short","date":"2016-05-07T14:00:00.000Z","updated":"2017-04-01T11:15:06.000Z","comments":true,"path":"2016/05/08/Java-8-Lambda-Expression-in-Short/","link":"","permalink":"https://www.mattshen.com/2016/05/08/Java-8-Lambda-Expression-in-Short/","excerpt":"","text":"Anonymous class in a new formSimply speaking, Java 8 Lambda expressions are just anonymous classes which have occasionally made their appearances in the previous Java versions. But now they appears in much more concise forms with the new syntactic level support. Here are a couple of examples how concise we can archive in Java coding with the help of lambda expression. 1234567891011121314151617181920212223//Anonymous classCollections.sort(names, new Comparator&lt;String&gt;() &#123; @Override public int compare(String o1, String o2) &#123; return o1.compareTo(o2); &#125;&#125;);//Java 8 Lambda expression in complete Collections.sort(names, (String o1, String o2) -&gt; &#123; return o1.compareTo(o2);&#125;);//Parameter type can be omitted, because the types can be inferredCollections.sort(names, (o1, o2) -&gt; &#123; return o1.compareTo(o2);&#125;);//return can be omitted for one line lambdaCollections.sort(names, (o1, o2) -&gt; o1.compareTo(o2));//method reference can make it even shorterCollections.sort(names, String::compareTo); Default method is necessary for lambdasWith anonymous classes, it is possible to define a new utility method, e.g. 12345678910//Anonymous classCollections.sort(names, new Comparator&lt;String&gt;() &#123; @Override public int compare(String o1, String o2) &#123; return o1.compareTo(o2); &#125; public Comparator&lt;String&gt; reversed() &#123; return Collections.reverseOrder(this); &#125;&#125;); But the utility method cannot fit into a concise lambda. This is why Java 8 has made default methods possible in interfaces. The example above can now be re-written in Java 8 as follow:1Collections.sort(names, ((Comparator&lt;String&gt;)String::compareTo).reversed()); Note: the type casting is necessary, because type inference is not that smart in that context. Using functional features rather than being functionalThe introduction of lambda and the re-written interfaces/classes makes Java 8 look like functional programming language. But as a matter of fact, it is not. Type is still the the first-class citizen, not functions. Everything in Java is still type of either predefined types or primitives. Passing lambdas around is actually just passing usual objects around. However, this is what is needed for most of the Java developers – writing concise code as well as thinking in a functional programming way. References https://github.com/winterbe/java8-tutorial http://www.infoq.com/articles/How-Functional-is-Java-8","categories":[{"name":"Programming Languages","slug":"Programming-Languages","permalink":"https://www.mattshen.com/categories/Programming-Languages/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.mattshen.com/tags/Java/"},{"name":"Lambda","slug":"Lambda","permalink":"https://www.mattshen.com/tags/Lambda/"},{"name":"Functional","slug":"Functional","permalink":"https://www.mattshen.com/tags/Functional/"}]}]}